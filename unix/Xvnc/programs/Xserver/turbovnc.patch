diff --git a/xorg-server-1.20.14/Xext/shm.c b/Xserver/Xext/shm.c
index 24c6b10..be2be20 100644
--- a/xorg-server-1.20.14/Xext/shm.c
+++ b/Xserver/Xext/shm.c
@@ -1211,7 +1211,7 @@ shm_tmpfile(void)
         "/var/tmp",
         "/tmp",
     };
-    int	fd;
+    int	fd, i;
 
 #ifdef HAVE_MEMFD_CREATE
     fd = memfd_create("xorg", MFD_CLOEXEC|MFD_ALLOW_SEALING);
@@ -1223,7 +1223,7 @@ shm_tmpfile(void)
 #endif
 
 #ifdef O_TMPFILE
-    for (int i = 0; i < ARRAY_SIZE(shmdirs); i++) {
+    for (i = 0; i < ARRAY_SIZE(shmdirs); i++) {
         fd = open(shmdirs[i], O_TMPFILE|O_RDWR|O_CLOEXEC|O_EXCL, 0666);
         if (fd >= 0) {
             DebugF ("Using O_TMPFILE\n");
@@ -1233,7 +1233,7 @@ shm_tmpfile(void)
     ErrorF ("Not using O_TMPFILE\n");
 #endif
 
-    for (int i = 0; i < ARRAY_SIZE(shmdirs); i++) {
+    for (i = 0; i < ARRAY_SIZE(shmdirs); i++) {
         char template[PATH_MAX];
         snprintf(template, ARRAY_SIZE(template), "%s/shmfd-XXXXXX", shmdirs[i]);
 #ifdef HAVE_MKOSTEMP
diff --git a/xorg-server-1.20.14/Xi/xichangehierarchy.c b/Xserver/Xi/xichangehierarchy.c
index 504defe..ad89a31 100644
--- a/xorg-server-1.20.14/Xi/xichangehierarchy.c
+++ b/Xserver/Xi/xichangehierarchy.c
@@ -140,7 +140,7 @@ add_master(ClientPtr client, xXIAddMasterInfo * c, int flags[MAXDEVICES])
 {
     DeviceIntPtr ptr, keybd, XTestptr, XTestkeybd;
     char *name;
-    int rc;
+    int i, rc;
 
     name = calloc(c->name_len + 1, sizeof(char));
     if (name == NULL) {
@@ -194,7 +194,7 @@ add_master(ClientPtr client, xXIAddMasterInfo * c, int flags[MAXDEVICES])
     flags[XTestptr->id] |= XISlaveAttached;
     flags[XTestkeybd->id] |= XISlaveAttached;
 
-    for (int i = 0; i < currentMaxClients; i++)
+    for (i = 0; i < currentMaxClients; i++)
         XIBarrierNewMasterDevice(clients[i], ptr->id);
 
  unwind:
@@ -219,7 +219,7 @@ static int
 remove_master(ClientPtr client, xXIRemoveMasterInfo * r, int flags[MAXDEVICES])
 {
     DeviceIntPtr ptr, keybd, XTestptr, XTestkeybd;
-    int rc = Success;
+    int i, rc = Success;
 
     if (r->return_mode != XIAttachToMaster && r->return_mode != XIFloating)
         return BadValue;
@@ -301,7 +301,7 @@ remove_master(ClientPtr client, xXIRemoveMasterInfo * r, int flags[MAXDEVICES])
         }
     }
 
-    for (int i = 0; i < currentMaxClients; i++)
+    for (i = 0; i < currentMaxClients; i++)
         XIBarrierRemoveMasterDevice(clients[i], ptr->id);
 
     /* disable the remove the devices, XTest devices must be done first
diff --git a/xorg-server-1.20.14/dix/devices.c b/Xserver/dix/devices.c
index e7c74d7..e0c93b6 100644
--- a/xorg-server-1.20.14/dix/devices.c
+++ b/Xserver/dix/devices.c
@@ -76,6 +76,11 @@ SOFTWARE.
 #include <X11/extensions/XI2.h>
 #include <X11/extensions/XIproto.h>
 #include <math.h>
+#ifdef TURBOVNC
+#ifdef HAVE_IEEEFP_H
+#include <ieeefp.h>
+#endif
+#endif
 #include <pixman.h>
 #include "exglobals.h"
 #include "exevents.h"
@@ -174,7 +179,11 @@ DeviceSetProperty(DeviceIntPtr dev, Atom property, XIPropertyValuePtr prop,
             return BadValue;
 
         for (i = 0; i < 9; i++)
+#ifdef TURBOVNC
+            if (!finite(f[i]))
+#else
             if (!isfinite(f[i]))
+#endif
                 return BadValue;
 
         if (!dev->valuator)
diff --git a/xorg-server-1.20.14/dix/events.c b/Xserver/dix/events.c
index 427b891..0f32bd8 100644
--- a/xorg-server-1.20.14/dix/events.c
+++ b/Xserver/dix/events.c
@@ -148,6 +148,12 @@ Equipment Corporation.
 #include "eventconvert.h"
 #include "mi.h"
 
+#ifdef TURBOVNC
+extern Window vncGetSelectionWindow(void);
+extern void vncHandleSelection(Atom selection, Atom target, Atom property,
+                               Atom requestor, TimeStamp time);
+#endif
+
 /* Extension events type numbering starts at EXTENSION_EVENT_BASE.  */
 #define NoSuchEvent 0x80000000  /* so doesn't match NoEventMask */
 #define StructureAndSubMask ( StructureNotifyMask | SubstructureNotifyMask )
@@ -5362,6 +5368,18 @@ ProcSendEvent(ClientPtr client)
 
     stuff->event.u.u.type &= ~(SEND_EVENT_BIT);
 
+#ifdef TURBOVNC
+    if (stuff->event.u.u.type == SelectionNotify &&
+        stuff->event.u.selectionNotify.requestor == vncGetSelectionWindow()) {
+        TimeStamp time;
+        time = ClientTimeToServerTime(stuff->event.u.selectionNotify.time);
+        vncHandleSelection(stuff->event.u.selectionNotify.selection,
+                           stuff->event.u.selectionNotify.target,
+                           stuff->event.u.selectionNotify.property,
+                           stuff->event.u.selectionNotify.requestor, time);
+    }
+#endif
+
     /* The client's event type must be a core event type or one defined by an
        extension. */
 
diff --git a/xorg-server-1.20.14/dix/property.c b/Xserver/dix/property.c
index ff1d669..de83d00 100644
--- a/xorg-server-1.20.14/dix/property.c
+++ b/Xserver/dix/property.c
@@ -362,6 +362,13 @@ dixChangeWindowProperty(ClientPtr pClient, WindowPtr pWin, Atom property,
     if (sendevent)
         deliverPropertyNotifyEvent(pWin, PropertyNewValue, pProp);
 
+#ifdef TURBOVNC
+    if (pWin->parent == NullWindow) {
+        extern void rfbRootPropertyChange();
+        rfbRootPropertyChange(pProp);
+    }
+#endif
+
     return Success;
 }
 
diff --git a/xorg-server-1.20.14/dix/registry.c b/Xserver/dix/registry.c
index 84d48b4..3e80392 100644
--- a/xorg-server-1.20.14/dix/registry.c
+++ b/Xserver/dix/registry.c
@@ -1,6 +1,7 @@
 /************************************************************
 
-Author: Eamon Walsh <ewalsh@tycho.nsa.gov>
+Authors: Eamon Walsh <ewalsh@tycho.nsa.gov>
+         D. R. Commander
 
 Permission to use, copy, modify, distribute, and sell this software and its
 documentation for any purpose is hereby granted without fee, provided that
@@ -32,7 +33,12 @@ CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 
 #ifdef X_REGISTRY_REQUEST
 #define CORE "X11"
+#if defined(TURBOVNC) && !defined(TURBOVNC_STATIC_XORG_PATHS)
+char registry_path[PATH_MAX] = SERVER_MISC_CONFIG_PATH "/protocol.txt";
+#define FILENAME registry_path
+#else
 #define FILENAME SERVER_MISC_CONFIG_PATH "/protocol.txt"
+#endif
 
 #define PROT_COMMENT '#'
 #define PROT_REQUEST 'R'
@@ -202,7 +208,11 @@ RegisterExtensionNames(ExtensionEntry * extEntry)
         }
 
  invalid:
+#ifdef TURBOVNC
+        LogMessage(X_WARNING, "Invalid line in %s, skipping\n", FILENAME);
+#else
         LogMessage(X_WARNING, "Invalid line in " FILENAME ", skipping\n");
+#endif
  skip:
         free(lineobj);
     }
@@ -353,7 +363,11 @@ dixResetRegistry(void)
     fh = fopen(FILENAME, "r");
     if (!fh)
         LogMessage(X_WARNING,
+#ifdef TURBOVNC
+                   "Failed to open protocol names file %s\n", FILENAME);
+#else
                    "Failed to open protocol names file " FILENAME "\n");
+#endif
 
     /* Add the core protocol */
     RegisterExtensionNames(&extEntry);
diff --git a/xorg-server-1.20.14/dix/selection.c b/Xserver/dix/selection.c
index d46103f..67509d4 100644
--- a/xorg-server-1.20.14/dix/selection.c
+++ b/Xserver/dix/selection.c
@@ -54,6 +54,14 @@ SOFTWARE.
 #include "selection.h"
 #include "xace.h"
 
+#ifdef TURBOVNC
+extern int vncConvertSelection(ClientPtr client, Atom selection, Atom target,
+                               Atom property, Window requestor, CARD32 time,
+                               const char *data);
+extern Window vncGetSelectionWindow(void);
+extern char *cachedData;
+#endif
+
 /*****************************************************************
  * Selection Stuff
  *
@@ -287,6 +295,15 @@ ProcConvertSelection(ClientPtr client)
     memset(&event, 0, sizeof(xEvent));
     if (rc != Success && rc != BadMatch)
         return rc;
+#ifdef TURBOVNC
+    else if (rc == Success && pSel->client == serverClient &&
+             pSel->window == vncGetSelectionWindow()) {
+        rc = vncConvertSelection(client, stuff->selection, stuff->target,
+                                 stuff->property, stuff->requestor,
+                                 stuff->time, cachedData);
+        if (rc == Success) return rc;
+    }
+#endif
     else if (rc == Success && pSel->window != None) {
         event.u.u.type = SelectionRequest;
         event.u.selectionRequest.owner = pSel->window;
diff --git a/xorg-server-1.20.14/fb/fbimage.c b/Xserver/fb/fbimage.c
index bd24728..801df20 100644
--- a/xorg-server-1.20.14/fb/fbimage.c
+++ b/Xserver/fb/fbimage.c
@@ -210,7 +210,7 @@ fbGetImage(DrawablePtr pDrawable,
 {
     FbBits *src;
     FbStride srcStride;
-    int srcBpp;
+    int i, srcBpp;
     int srcXoff, srcYoff;
     FbStip *dst;
     FbStride dstStride;
@@ -240,7 +240,7 @@ fbGetImage(DrawablePtr pDrawable,
                   dst, dstStride, 0, w * srcBpp, h, GXcopy, FB_ALLONES, srcBpp);
 
         if (pm != FB_ALLONES) {
-            for (int i = 0; i < dstStride * h; i++)
+            for (i = 0; i < dstStride * h; i++)
                 dst[i] &= pm;
         }
     }
diff --git a/xorg-server-1.20.14/glx/glxdricommon.c b/Xserver/glx/glxdricommon.c
index 2e00bab..a16e1bc 100644
--- a/xorg-server-1.20.14/glx/glxdricommon.c
+++ b/Xserver/glx/glxdricommon.c
@@ -258,7 +258,11 @@ glxConvertConfigs(const __DRIcoreExtension * core,
     return head.next;
 }
 
+#if defined(TURBOVNC) && !defined(TURBOVNC_STATIC_XORG_PATH)
+char *dri_driver_path = DRI_DRIVER_PATH;
+#else
 static const char dri_driver_path[] = DRI_DRIVER_PATH;
+#endif
 
 /* Temporary define to allow building without a dri_interface.h from
  * updated Mesa.  Some day when we don't care about Mesa that old any
diff --git a/xorg-server-1.20.14/glx/glxscreens.h b/Xserver/glx/glxscreens.h
index 40649f8..5f89e5d 100644
--- a/xorg-server-1.20.14/glx/glxscreens.h
+++ b/Xserver/glx/glxscreens.h
@@ -37,6 +37,7 @@
 
 #include "extension_string.h"
 #include "glxvndabi.h"
+#include "glx_extinit.h"
 
 typedef struct __GLXconfig __GLXconfig;
 struct __GLXconfig {
@@ -116,7 +117,6 @@ GLint glxConvertToXVisualType(int visualType);
 ** and DDX layers of the GLX server extension.  The methods provide an
 ** interface for context management on a screen.
 */
-typedef struct __GLXscreen __GLXscreen;
 struct __GLXscreen {
     void (*destroy) (__GLXscreen * screen);
 
diff --git a/xorg-server-1.20.14/glx/vndext.c b/Xserver/glx/vndext.c
index 0513733..aa93900 100644
--- a/xorg-server-1.20.14/glx/vndext.c
+++ b/Xserver/glx/vndext.c
@@ -213,6 +213,7 @@ GlxExtensionInit(void)
 {
     ExtensionEntry *extEntry;
     GlxExtensionEntry = NULL;
+    int i;
 
     // Init private keys, per-screen data
     if (!dixRegisterPrivateKey(&glvXGLVScreenPrivKey, PRIVATE_SCREEN, 0))
@@ -244,7 +245,7 @@ GlxExtensionInit(void)
     CallCallbacks(&vndInitCallbackListPtr, extEntry);
 
     /* We'd better have found at least one vendor */
-    for (int i = 0; i < screenInfo.numScreens; i++)
+    for (i = 0; i < screenInfo.numScreens; i++)
         if (GlxGetVendorForScreen(serverClient, screenInfo.screens[i]))
             return;
     extEntry->base = 0;
diff --git a/xorg-server-1.20.14/include/extinit.h b/Xserver/include/extinit.h
index 46081ad..9b3a4d5 100644
--- a/xorg-server-1.20.14/include/extinit.h
+++ b/Xserver/include/extinit.h
@@ -1,6 +1,7 @@
 /************************************************************
 
 Copyright 1996 by Thomas E. Dickey <dickey@clark.net>
+Copyright 2017 D. R. Commander
 
                         All Rights Reserved
 
@@ -161,4 +162,13 @@ extern void dri3_extension_init(void);
 #include "presentext.h"
 #endif
 
+#ifdef TURBOVNC
+extern void vncExtensionInit(void);
+
+#ifdef NVCONTROL
+extern Bool noNVCTRLExtension;
+extern void nvCtrlExtensionInit(void);
+#endif
+#endif
+
 #endif
diff --git a/xorg-server-1.20.14/mi/miinitext.c b/Xserver/mi/miinitext.c
index b7c7021..0e28272 100644
--- a/xorg-server-1.20.14/mi/miinitext.c
+++ b/Xserver/mi/miinitext.c
@@ -1,6 +1,7 @@
 /***********************************************************
 
 Copyright 1987, 1998  The Open Group
+Copyright 2012, 2015, 2017  D. R. Commander
 
 Permission to use, copy, modify, distribute, and sell this software and its
 documentation for any purpose is hereby granted without fee, provided that
@@ -180,6 +181,12 @@ static const ExtensionModule staticExtensions[] = {
 #ifdef GLXEXT
     {GlxExtensionInit, "GLX", &noGlxExtension},
 #endif
+#ifdef TURBOVNC
+    {vncExtensionInit, "VNC-EXTENSION", NULL},
+#ifdef NVCONTROL
+    {nvCtrlExtensionInit, "NV-CONTROL", &noNVCTRLExtension},
+#endif
+#endif
 };
 
 Bool
diff --git a/xorg-server-1.20.14/os/backtrace.c b/Xserver/os/backtrace.c
index 2aad0e3..d0447d7 100644
--- a/xorg-server-1.20.14/os/backtrace.c
+++ b/Xserver/os/backtrace.c
@@ -160,8 +160,10 @@ xorg_backtrace(void)
 #else                           /* not glibc or glibc < 2.1 */
 
 #if defined(__sun) && defined(__SVR4)
+#ifndef TURBOVNC
 #define HAVE_PSTACK
 #endif
+#endif
 
 #if defined(HAVE_WALKCONTEXT)   /* Solaris 9 & later */
 
diff --git a/xorg-server-1.20.14/os/log.c b/Xserver/os/log.c
index cc82191..f5d2891 100644
--- a/xorg-server-1.20.14/os/log.c
+++ b/Xserver/os/log.c
@@ -640,7 +640,7 @@ LogSWrite(int verb, const char *buf, size_t len, Bool end_line)
 void
 LogVWrite(int verb, const char *f, va_list args)
 {
-    return LogVMessageVerb(X_NONE, verb, f, args);
+    LogVMessageVerb(X_NONE, verb, f, args);
 }
 
 void
diff --git a/xorg-server-1.20.14/randr/rrmode.c b/Xserver/randr/rrmode.c
index d34025b..d76a24d 100644
--- a/xorg-server-1.20.14/randr/rrmode.c
+++ b/Xserver/randr/rrmode.c
@@ -1,5 +1,6 @@
 /*
  * Copyright © 2006 Keith Packard
+ * Copyright © 2017 D. R. Commander
  *
  * Permission to use, copy, modify, distribute, and sell this software and its
  * documentation for any purpose is hereby granted without fee, provided that
@@ -68,6 +69,15 @@ RRModeCreate(xRRModeInfo * modeInfo, const char *name, ScreenPtr userScreen)
     if (!RRInit())
         return NULL;
 
+#ifdef TURBOVNC
+    /*
+     * The screen structure uses a signed short to represent width and height,
+     * so activating a mode with width or height > 32767 can crash the server.
+     */
+    if (modeInfo->width > MAXSHORT || modeInfo->height > MAXSHORT)
+        return NULL;
+#endif
+
     mode = malloc(sizeof(RRModeRec) + modeInfo->nameLength + 1);
     if (!mode)
         return NULL;
diff --git a/xorg-server-1.20.14/xfixes/xfixes.c b/Xserver/xfixes/xfixes.c
index 53a6bd6..28248d4 100644
--- a/xorg-server-1.20.14/xfixes/xfixes.c
+++ b/Xserver/xfixes/xfixes.c
@@ -221,7 +221,27 @@ XFixesExtensionInit(void)
         return;
 
     if (XFixesSelectionInit() && XFixesCursorInit() && XFixesRegionInit() &&
+#ifdef TURBOVNC
+        /* Ubuntu 12.04 (precise) shipped a proposed/experimental patch
+         * (https://patchwork.freedesktop.org/patch/8884) to the XFixes
+         * protocol that extended the functionality of pointer barriers.  This
+         * patch was apparently never accepted upstream and was removed in
+         * 13.10 (raring).  Basically everything on Ubuntu 12.04 (probably
+         * 12.10 and 13.04 as well) that uses XFixes, including the window
+         * managers, believes that there are 3 XFixes events, but our server
+         * (and anything else built against the official X.org fixesproto)
+         * believes that there are only 2.  Since X RandR events come
+         * immediately after XFixes events in the sequence, when the TurboVNC
+         * Server sends those events to the window manager and other X clients,
+         * the X clients misinterpret the events, and desktop resizing fails.
+         * Easiest way to work around the issue is to add a slot for the
+         * unofficial XFixes event.  Refer also to
+         * https://lists.x.org/archives/xorg-devel/2012-April/030484.html
+         */
+        (extEntry = AddExtension(XFIXES_NAME, XFixesNumberEvents + 1,
+#else
         (extEntry = AddExtension(XFIXES_NAME, XFixesNumberEvents,
+#endif
                                  XFixesNumberErrors,
                                  ProcXFixesDispatch, SProcXFixesDispatch,
                                  NULL, StandardMinorOpcode)) != 0) {
diff --git a/xorg-server-1.20.14/xkb/xkbInit.c b/Xserver/xkb/xkbInit.c
index 9e45b4b..ddd5ef7 100644
--- a/xorg-server-1.20.14/xkb/xkbInit.c
+++ b/Xserver/xkb/xkbInit.c
@@ -767,6 +767,30 @@ XkbProcessArguments(int argc, char *argv[], int i)
             return -1;
         }
     }
+#if defined(TURBOVNC) && !defined(TURBOVNC_XORG_STATIC_PATHS)
+    else if (strncmp(argv[i], "-xkbcompdir", 11) == 0) {
+        if (++i < argc) {
+#if !defined(WIN32) && !defined(__CYGWIN__)
+            if (getuid() != geteuid()) {
+                LogMessage(X_WARNING,
+                           "-xkbcompdir is not available for setuid X servers\n");
+                return -1;
+            }
+            else
+#endif
+            {
+                if (strlen(argv[i]) < PATH_MAX) {
+                    XkbBinDirectory = argv[i];
+                    return 2;
+                }
+                else {
+                    LogMessage(X_ERROR, "-xkbcompdir pathname too long\n");
+                    return -1;
+                }
+            }
+        }
+    }
+#endif
     else if ((strncmp(argv[i], "-accessx", 8) == 0) ||
              (strncmp(argv[i], "+accessx", 8) == 0)) {
         int j = 1;
